// Code generated by go-bindata.
// sources:
// 01_project.up.sql
// 01_projects.down.sql
// 02_deployments.down.sql
// 02_deployments.up.sql
// 03_messages.down.sql
// 03_messages.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_projectUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcd\xcd\xae\x82\x30\x10\x05\xe0\x7d\x9f\x62\x96\x90\x90\xfb\x02\x77\x55\x71\x4c\x1a\x4b\xc1\x32\x8d\xe2\x86\x54\xe8\xa2\xfe\x00\x62\x79\x7f\x63\x14\x5c\x39\xab\xc9\xc9\x77\x72\x52\x8d\x9c\x10\x88\xaf\x24\xc2\x30\x9d\xae\xbe\xf9\x1b\xc6\xfe\xec\x9a\xf0\x88\x18\x80\x6f\x61\xbe\x12\xb5\xe0\xf2\xfd\x17\x5a\x64\x5c\x57\xb0\xc5\x2a\x61\x00\x9d\xbd\xb9\x8f\x22\x3c\xd0\xdc\x50\x39\x81\x32\x52\xbe\x88\x1d\x7c\x1d\xfa\x8b\xeb\x7e\x93\x66\x74\x36\xb8\xb6\xb6\x01\x48\x64\x58\x12\xcf\x0a\x3a\x2e\x04\xd6\xb8\xe1\x46\x12\xa8\x7c\x1f\xc5\x09\x63\x00\x69\xae\x4a\xd2\x5c\x28\x82\xa9\xf3\xf7\xfa\x3b\x62\x94\xd8\x19\x8c\x96\x20\x66\xf1\x3f\x7b\x06\x00\x00\xff\xff\x3f\xdb\xc4\x3c\xed\x00\x00\x00")

func _01_projectUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_projectUpSql,
		"01_project.up.sql",
	)
}

func _01_projectUpSql() (*asset, error) {
	bytes, err := _01_projectUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_project.up.sql", size: 237, mode: os.FileMode(420), modTime: time.Unix(1580112162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_projectsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x28\xca\xcf\x4a\x4d\x2e\x29\xb6\x06\x04\x00\x00\xff\xff\x71\x1e\x49\x28\x1c\x00\x00\x00")

func _01_projectsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_projectsDownSql,
		"01_projects.down.sql",
	)
}

func _01_projectsDownSql() (*asset, error) {
	bytes, err := _01_projectsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_projects.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1580112119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_deploymentsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\x4b\x49\x2d\xc8\xc9\xaf\xcc\x4d\xcd\x2b\x29\xb6\x06\x04\x00\x00\xff\xff\x89\xae\x87\xdc\x1e\x00\x00\x00")

func _02_deploymentsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_deploymentsDownSql,
		"02_deployments.down.sql",
	)
}

func _02_deploymentsDownSql() (*asset, error) {
	bytes, err := _02_deploymentsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_deployments.down.sql", size: 30, mode: os.FileMode(420), modTime: time.Unix(1580112137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_deploymentsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x4f\xb4\x30\x10\x86\xef\xfc\x8a\x39\x42\xf2\xe5\x8b\x77\x4f\x15\x07\x25\x96\xb2\x29\x43\x74\xbd\x10\x16\x86\x58\x05\x4a\x80\xd5\xf8\xef\x0d\x6e\xa8\xb8\x59\x7b\x9a\xa4\xcf\xdb\x77\x9e\x86\x1a\x05\x21\x90\xb8\x91\x08\xc3\xf1\xd0\x9a\xea\x7f\xcd\x43\x6b\x3f\x3b\xee\xe7\x09\x7c\x0f\xc0\xd4\x70\x7e\x32\xd4\xb1\x90\xa7\x79\xa7\xe3\x44\xe8\x3d\x3c\xe0\xfe\x9f\x07\x30\xbd\x94\xe7\x34\xe1\x13\xad\xb3\x4a\x09\x54\x2e\xe5\x82\x9e\x8a\xb8\x2e\xca\xd9\xa1\x71\x82\x19\x89\x64\x47\xcf\x0e\x85\x5b\x8c\x44\x2e\x09\x54\xfa\xe8\x07\x4b\x70\x18\xed\x2b\x57\x73\xb1\xd9\xcc\xf4\xee\x8d\x5f\x1d\x3d\x7f\x14\x95\xed\x3a\x33\x17\x95\x3d\xf6\x33\x8f\x17\x51\xd7\x71\xb5\x84\xde\x79\x34\x8d\xe1\xad\xf7\xc1\xda\x96\xcb\xfe\x72\xa8\x29\xdb\x89\xb7\xc1\x3f\x8c\x9c\xc8\xf7\x72\x1e\x40\x98\xaa\x8c\xb4\x88\x15\xad\x4e\xcd\x1b\x44\xa9\xc6\xf8\x4e\x2d\x1f\x0a\xfe\x8f\x6a\x00\x1a\x23\xd4\xa8\x42\xcc\x56\x7a\x02\x7f\xb9\x48\x04\x85\xf7\x10\xe5\x52\x7a\xc1\xb5\xf7\x15\x00\x00\xff\xff\xa4\x86\x28\x7d\xd4\x01\x00\x00")

func _02_deploymentsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_deploymentsUpSql,
		"02_deployments.up.sql",
	)
}

func _02_deploymentsUpSql() (*asset, error) {
	bytes, err := _02_deploymentsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_deployments.up.sql", size: 468, mode: os.FileMode(420), modTime: time.Unix(1580112132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_messagesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\xcb\x4d\x2d\x2e\x4e\x4c\x4f\x2d\xb6\x06\x04\x00\x00\xff\xff\xd4\xe9\xd7\x74\x1b\x00\x00\x00")

func _03_messagesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_messagesDownSql,
		"03_messages.down.sql",
	)
}

func _03_messagesDownSql() (*asset, error) {
	bytes, err := _03_messagesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_messages.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1580112151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_messagesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x41\xca\xc2\x30\x10\x46\xf7\x39\xc5\xb7\x6c\xe1\xe7\xbf\x80\xab\x18\xa6\x1a\x4c\x53\x99\xa6\x60\x57\xa2\x36\x4a\xb1\xd5\x42\x74\xe1\xed\x25\x58\xb5\xce\x6a\xe0\xbd\x37\xa3\x98\xa4\x23\x38\x39\x37\x84\xe1\xbe\xef\xda\xc3\x7f\xef\x43\xd8\x9d\x7c\x40\x22\x80\xb6\xc1\x64\x4a\x62\x2d\xcd\x6b\x5f\xb3\xce\x25\xd7\x58\x51\xfd\x27\x80\xb1\x1a\x45\x47\x1b\xf7\x8e\x6c\xe1\x60\x2b\x63\xa2\xd5\xf8\xa1\xbb\x3e\x7a\x7f\xb9\x6d\xdb\x06\xda\x7e\xa4\x89\x25\x00\x55\xd8\xd2\xb1\x8c\xfc\x5b\x1c\xcf\xc8\x0a\x26\xbd\xb0\xf1\x27\x92\x9f\x5b\x29\x98\x32\x62\xb2\x8a\xca\x49\x13\x90\x44\x96\x4b\xa7\x96\xc8\x2a\x63\x44\x3a\x7b\x06\x00\x00\xff\xff\xd1\xbf\x46\x65\xf4\x00\x00\x00")

func _03_messagesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__03_messagesUpSql,
		"03_messages.up.sql",
	)
}

func _03_messagesUpSql() (*asset, error) {
	bytes, err := _03_messagesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_messages.up.sql", size: 244, mode: os.FileMode(420), modTime: time.Unix(1580112157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_project.up.sql": _01_projectUpSql,
	"01_projects.down.sql": _01_projectsDownSql,
	"02_deployments.down.sql": _02_deploymentsDownSql,
	"02_deployments.up.sql": _02_deploymentsUpSql,
	"03_messages.down.sql": _03_messagesDownSql,
	"03_messages.up.sql": _03_messagesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"01_project.up.sql": &bintree{_01_projectUpSql, map[string]*bintree{}},
	"01_projects.down.sql": &bintree{_01_projectsDownSql, map[string]*bintree{}},
	"02_deployments.down.sql": &bintree{_02_deploymentsDownSql, map[string]*bintree{}},
	"02_deployments.up.sql": &bintree{_02_deploymentsUpSql, map[string]*bintree{}},
	"03_messages.down.sql": &bintree{_03_messagesDownSql, map[string]*bintree{}},
	"03_messages.up.sql": &bintree{_03_messagesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

